%% srm_nirs_eeg_multsubject

% Benjamin Richardson, Maanasa Guru Adimurthy
% script to analyze group averages for SRM-NIRS-EEG-1
 
addpath("/home/ben/Documents/GitHub/SRM-NIRS-EEG/errorbar_files/errorbar_files/");
addpath(genpath('/home/ben/Documents/MATLAB/eeglab2023.1/functions/'));

%addpath("C:\Users\benri\Documents\GitHub\SRM-NIRS-EEG\errorbar_files\errorbar_files");
%addpath(genpath('C:\Users\benri\Documents\eeglab2023.0\functions'));

all_maskers = {'m_speech__ild_0__itd_500__targ_r__control_0',...
    'm_noise__ild_0__itd_50__targ_l__control_0',...
    'm_noise__ild_0__itd_50__targ_r__control_0',...
    'm_speech__ild_70n__itd_0__targ_r__control_0',...
    'm_speech__ild_0__itd_50__targ_l__control_0',...
    'm_speech__ild_10__itd_0__targ_l__control_0',...
    'm_speech__ild_0__itd_500__targ_l__control_0',...
    'm_speech__ild_0__itd_500__targ_l__control_1',...
    'm_noise__ild_0__itd_500__targ_r__control_1',...
    'm_noise__ild_0__itd_500__targ_r__control_0',...
    'm_noise__ild_70n__itd_0__targ_l__control_0',...
    'm_noise__ild_10__itd_0__targ_l__control_0',...
    'm_speech__ild_10__itd_0__targ_r__control_0',...
    'm_noise__ild_10__itd_0__targ_r__control_0',...
    'm_speech__ild_0__itd_50__targ_r__control_0',...
    'm_speech__ild_0__itd_500__targ_r__control_1',...
    'm_noise__ild_70n__itd_0__targ_r__control_0',...
    'm_noise__ild_0__itd_500__targ_l__control_1',...
    'm_noise__ild_0__itd_500__targ_l__control_0',...
    'm_speech__ild_70n__itd_0__targ_l__control_0'}; % we will maintain this order throughout

subjID={'NDARVX375BR6','NDARZD647HJ1','NDARBL382XK5','NDARGF569BF3','NDARBA306US5','NDARFD284ZP3','NDARAS648DT4','NDARLM531OY3','NDARXL287BE1','NDARRF358KO3','NDARGT639XS6','NDARFV472HU7','NDARDC882NK4','NDARWB491KR3','NDARNL224RR9','NDARTT639AB1','NDARAZC45TW3'};
%all_extracted_alpha= cell(length(subjID),1);


user = 'Noptop';

if user == 'Laptop'
    BehaviorTable = readtable('C:\Users\benri\Downloads\data\srm-nirs-eeg-1.xlsx','Format','auto');
else
    BehaviorTable = readtable('/home/ben/Nextcloud/Python/data/srm-nirs-eeg-1.xlsx','Format','auto');
end

for subind= 1:length(subjID)
    subID=subjID{subind};
    if user == 'Laptop'
        all_eeg_epoch = load(['C:\Users\benri\Documents\GitHub\SRM-NIRS-EEG\prepro_epoched_data\' subID 'all_epochs.mat']);
    else
        all_eeg_epoch = load(['/home/ben/Documents/GitHub/SRM-NIRS-EEG/prepro_epoched_data/' subID 'all_epochs.mat']);
    end
    all_eeg_epoch_data=all_eeg_epoch.EEG.data;
    all_eeg_epoch_time=all_eeg_epoch.EEG.times;

    %p_o_channels=[11:20];

    all_eeg_paritealoccipitalchan = all_eeg_epoch_data;%(p_o_channels,:,:);
    numchannels=size(all_eeg_paritealoccipitalchan,1);
    numtrials= size(all_eeg_paritealoccipitalchan,3);

    fs= all_eeg_epoch.EEG.srate;




    %% Analysis of peak alpha power

    epoch_duration=1;

    alpha_band=[7 14];
    %min_peak_width=0.6;
    % Time vector for power spectrum for each epoch
    samples= epoch_duration*fs;
    [~,index_time0] = min(abs(all_eeg_epoch.EEG.times - (1000)));
    [~,index_time1]=min(abs(all_eeg_epoch.EEG.times - (2000)));


    %FFT
    data_segment=squeeze(nanmean(all_eeg_paritealoccipitalchan(:,index_time0:index_time1,:),[1,3]));
    %zero_padding= zeros(1,10*fs);
    %data_segment=[zero_padding data_segment zero_padding];
    %power_spectrum=abs(fft(data_segment));
    %avgpowerspectra(j)= nanmean(power_spectrum)
%     L=512;
%     y= fft(data_segment);
%     p2=abs(y/L);
%     p1= p2(1:L/2+1);
%     p1(2:end-1)=2*p1(2:end-1);
%     f= fs*(0:(L/2))/L;
    [p,f] = pspectrum(data_segment);
    f = (f*fs)/(2*pi);
%     figure;
%     hold on
%     plot(f,p)
%     xlabel('Frequency')
%     ylabel('Power')
%     title(subID)
    [~,low_end_f_index] = min(abs(f - 7)); % index of 7 Hz
    [~,high_end_f_index] = min(abs(f - 14)); % index of 14 Hz
    f_alpha = f(low_end_f_index:high_end_f_index);
    p_alpha = p(low_end_f_index:high_end_f_index);
    [ipaf_maxs,ipaf_index] = findpeaks(p_alpha);
    if length(ipaf_index) > 1
        ipaf_index = ipaf_index(ipaf_maxs == max(ipaf_maxs));
    end
    if ~isempty(ipaf_index)
        ipaf = f_alpha(ipaf_index);
    elseif isempty(ipaf_index)
        [~,ipaf_index] = max(p_alpha);
        ipaf = f_alpha(ipaf_index);
    end
    disp("ipaf =")
    disp(ipaf)
    %xline(ipaf)

    %% Extracting alpha
    %% YUQI DENG METHOD
    method = 'Yuq';
    extracted_alpha=[]; % num of channels,num of trials
    lowpass_cutoff = ((ipaf - 0.1)/(all_eeg_epoch.EEG.srate/2)); % normalize frequency
    highpass_cutoff = ((ipaf + 0.1)/(all_eeg_epoch.EEG.srate/2));
    b = fir1(256,[lowpass_cutoff highpass_cutoff]);
    disp(["Subject: ", subID])
    this_wb = waitbar(0, 'Starting');
    epoch_time_limits = [-3 12];
    for ichannel= 1:numchannels
        for itrial=1:numtrials

            %pullout data for this channel and trial
            this_EEG= double(squeeze(all_eeg_paritealoccipitalchan(ichannel,:,itrial)));
            % Filter this data in 2 Hz window (+/- 1 Hz) around IPAF with FIR
            this_current_alpha = filtfilt(b,1,this_EEG);
            % pull out alpha envelope
            this_current_alpha_envelope = abs(hilbert(this_current_alpha));
            %hold on;plot(this_current_alpha_envelope)
            % save into larger array
            power(itrial,ichannel,:) = this_current_alpha_envelope; % this will be baselined below
            t = linspace((epoch_time_limits(1))*1000,(epoch_time_limits(2))*1000,size(this_current_alpha_envelope,2));
        end

    end
    

    close(this_wb)
    %% BEN METHOD FROM JASMINE EEG PROJECT
%     method = 'Ben';
%     epoch_time_limits = [-3 12];
%     disp(["Subject: ", subID])
%     this_wb = waitbar(0, 'Starting');
%     for ichannel= 1:numchannels
%         waitbar(ichannel/numchannels, this_wb, sprintf('Progress: %d %%', floor((ichannel/numchannels)*100)));
%         for itrial=1:numtrials
% 
%             %pullout data for this channel and trial
%             this_EEG = double(squeeze(all_eeg_paritealoccipitalchan(ichannel,:,itrial)));
%             % Subtract ERP
%             %this_EEG = this_EEG - nanmean(all_eeg_paritealoccipitalchan(ichannel,:,:),3);
% 
%             % Take Power spectrogram
%             n_padsamples = 256*2; % 2 seconds
%             eeg_zeropadded = [zeros(1,n_padsamples),this_EEG,zeros(1,n_padsamples)]; % zero padding
% 
%             fs = 256;
%             nseg = 50;
%             overlap = 49;
%             nfft = 256;
%             [P,f,~] = spectrogram(eeg_zeropadded,nseg,overlap,0:0.25:50,fs); % spectrogram(eeg_zeropadded,[],[],0:0.25:50,fs); %
%             t = linspace((epoch_time_limits(1)-(n_padsamples/fs))*1000,(epoch_time_limits(2)+(n_padsamples/fs))*1000,size(P,2));
%             P = 20*log10(abs(P));
% 
%             %[~,timeindex1] = min(abs(t + 3000)); % where to start baselining (weird bc of zero padding)
%             %[~,timeindex2] = min(abs(t + 2000));
% 
%             %resting_ersp_mean(itrial,ichannel,:) = nanmean(P(:,timeindex1:timeindex2),2); % nanmean during pre-cue period
%             %resting_ersp_std(itrial,ichannel,:) = std(P(:,timeindex1:timeindex2),[],2); % std during pre-cue period
% 
%             [~,trim_time_1] = min(abs(t - (epoch_time_limits(1)*1000)));
%             [~,trim_time_2] = min(abs(t - (epoch_time_limits(2)*1000)));
% 
%             P = P(:,trim_time_1:trim_time_2);
%             t = t(trim_time_1:trim_time_2);
% 
%             power(itrial,ichannel,:,:) = P; % (P - squeeze(resting_ersp_mean(itrial,ichannel,:)))./squeeze(resting_ersp_std(itrial,ichannel,:));
%             %                             itc(itrial,ichannel,:,:) = R;
%             %                             powbase(itrial,ichannel,:,:) = PB;
%             %                             times(itrial,ichannel,:) = t;
%             %                             freqs(itrial,ichannel,:) = f;
%             %                             erspboot(itrial,ichannel,:,:) = Pboot;
%             %                             itcboot(itrial,ichannel,:,:) = Rboot;
%             freqs(itrial,ichannel,:) = f;
%             times(itrial,ichannel,:) = t;
% 
%         end
%     end
%     close(this_wb)


    %% Extract alpha
    if method == 'Ben'
        current_alpha_power = squeeze(nanmean(power(:,:,find(f==ipaf-1):find(f==ipaf+1),:),[3])); % take average over frequency
        % baseline over trials
        [~,timeindex1] = min(abs(t + 1000));
        [~,timeindex2] = min(abs(t + 0));
        for ichannel = 1:numchannels
            baseline_mean = nanmean(current_alpha_power(:,ichannel,timeindex1:timeindex2),'all');
            baseline_std = std(current_alpha_power(:,ichannel,timeindex1:timeindex2),[],'all');
            current_alpha_power(:,ichannel,:) = (current_alpha_power(:,ichannel,:) - baseline_mean)./baseline_std;
        end
    elseif method == 'Yuq'
        % no need to take average over frequency here
        current_alpha_power = power;
        [~,timeindex1] = min(abs(t + 1000));
        [~,timeindex2] = min(abs(t + 0));
        for ichannel = 1:numchannels
            baseline_mean = nanmean(current_alpha_power(:,ichannel,timeindex1:timeindex2),'all');
            baseline_std = std(current_alpha_power(:,ichannel,timeindex1:timeindex2),[],'all');
            current_alpha_power(:,ichannel,:) = (current_alpha_power(:,ichannel,:) - baseline_mean)./baseline_std;
            %current_alpha_power(:,ichannel,:) = log10(current_alpha_power(:,ichannel,:)./baseline_mean);
        end
    end
    


    %% DOUBLE CHECK BASELINE AND LOOK AT RAW SPECTROGRAMS
    extracted_alpha_data{subind}= current_alpha_power; %permute(current_alpha_power,[2 1 3]);

    
end

% subject loop ends

figure;
for isubject = 1:length(subjID)
    subID=subjID{isubject};
    if user == 'Laptop'
        if subID == "NDARVX375BR6"
            subID = "NDARVX753BR6";
            load('C:\Users\benri\Documents\GitHub\SRM-NIRS-EEG\prepro_epoched_data\' +  "NDARVX375BR6" + 'epochs_removed.mat')
        else
            load(append('C:\Users\benri\Documents\GitHub\SRM-NIRS-EEG\prepro_epoched_data\',subID,'epochs_removed.mat'))
        end
    else
        if subID == "NDARVX375BR6"
            subID = "NDARVX753BR6";
            load('/home/ben/Documents/GitHub/SRM-NIRS-EEG/prepro_epoched_data/' +  "NDARVX375BR6" + 'epochs_removed.mat')
        else
            load(append('/home/ben/Documents/GitHub/SRM-NIRS-EEG/prepro_epoched_data/',subID,'epochs_removed.mat'))
        end
    end
    rows_this_subject = find(BehaviorTable.S == string(subID));
    conditions = BehaviorTable.Condition(rows_this_subject);

    conditions = conditions(indices);

    if length(conditions) < 20
        disp(subjID(isubject))
    end

    for icondition = 1:length(unique(conditions))
        if sum(conditions == icondition) == 4
            extracted_alpha_for_plotting(isubject,icondition,:,:,:) = extracted_alpha_data{isubject}(conditions==icondition,:,:);
        else
            extracted_alpha_for_plotting(isubject,icondition,:,:,:) = cat(1,extracted_alpha_data{isubject}(conditions==icondition,:,:),nan(4 - sum(conditions == icondition),size(extracted_alpha_for_plotting,4),size(extracted_alpha_for_plotting,5)));
        end
        % num subjects x num conditions x num presentations x num channels
        % of this condition x time

        % take mean over presentations, baseline
        extracted_alpha_for_plotting(isubject,icondition,:,:,:) = (extracted_alpha_for_plotting(isubject,icondition,:,:,:) - nanmean(extracted_alpha_for_plotting(isubject,icondition,:,:,timeindex1:timeindex2),'all'))./nanstd(extracted_alpha_for_plotting(isubject,icondition,:,:,timeindex1:timeindex2),[],'all'); 
    end
        %% PLOT INDIVIDUAL ALPHA TRACES
        left_hemisphere_channels = [1,2,4,5];
right_hemisphere_channels = [7,8,9,10];
    figure(1)
    hold on
    plot(t,squeeze(nanmean(extracted_alpha_for_plotting(isubject,logical(contains(string(all_maskers),'__ild_0__itd_500__').*contains(string(all_maskers),'__targ_r')),:,right_hemisphere_channels,:),[1,2,3,4])))
    xlabel('Time (ms)','FontSize',18)
    ylabel('Alpha Power JUST ITD500 (z-score)')
    title('Right Hemisphere Channels Attend Right','FontSize',18)

    figure(2)
    hold on
    plot(t,squeeze(nanmean(extracted_alpha_for_plotting(isubject,logical(contains(string(all_maskers),'__ild_0__itd_500__').*contains(string(all_maskers),'__targ_r')),:,left_hemisphere_channels,:),[1,2,3,4])))
    xlabel('Time (ms)','FontSize',18)
    ylabel('Alpha Power JUST ITD500 (z-score)')
    title('Left Hemisphere Channels Attend Right','FontSize',18)

    %% PLOT TOPOPLOTS FOR THIS SUBJECT
    spatial_lateralization = []; % 4 x 32 vector (condition order: itd50, itd500, ild10, ild70n)

    condition_tags = {'__ild_0__itd_50__','__ild_0__itd_500__','__ild_10__itd_0__','__ild_70n__itd_0__'};
    for i = 1:length(condition_tags)
        these_lateralizations = [];
        this_condition_tag = string(condition_tags(i));
        pow_attend_left = squeeze(nanmean(extracted_alpha_for_plotting(isubject,logical(contains(string(all_maskers),this_condition_tag).*contains(string(all_maskers),'__targ_l').*contains(string(all_maskers),'__control_0')),:,:,timeindex2:timeindex3),[1,2,3,5]));
        pow_attend_right = squeeze(nanmean(extracted_alpha_for_plotting(isubject,logical(contains(string(all_maskers),this_condition_tag).*contains(string(all_maskers),'__targ_r').*contains(string(all_maskers),'__control_0')),:,:,timeindex2:timeindex3),[1,2,3,5]));
        these_lateralizations(isubject,:) = (pow_attend_left - pow_attend_right);%./(pow_attend_left + pow_attend_right);
        spatial_lateralization(i,:) = these_lateralizations;
    end
    if user == 'Laptop'
        locs_filename = 'C:\Users\benri\Documents\GitHub\SRM-NIRS-EEG\chan_locs_pol_PO_ONLY.txt';
    else
        locs_filename  = '/home/ben/Documents/GitHub/SRM-NIRS-EEG/chan_locs_pol_PO_ONLY.txt';
    end
    cmin = -0.4;
    cmax = 0.4;
    figure;
    subplot(2,2,1)
    topoplot(spatial_lateralization(1,:),locs_filename,'maplimits',[cmin cmax],'interplimits','head','plotrad',0.6)
    colorbar
    ax = gca;
    ax.CLim = [cmin cmax];
    title('ITD50')
    
    subplot(2,2,2)
    topoplot(spatial_lateralization(2,:),locs_filename,'maplimits',[cmin cmax],'interplimits','head','plotrad',0.6)
    colorbar
    ax = gca;
    ax.CLim = [cmin cmax];
    title('ITD500')
    
    subplot(2,2,3)
    topoplot(spatial_lateralization(3,:),locs_filename,'maplimits',[cmin cmax],'interplimits','head','plotrad',0.6)
    colorbar
    ax = gca;
    ax.CLim = [cmin cmax];
    title('ILD10')
    
    subplot(2,2,4)
    topoplot(spatial_lateralization(4,:),locs_filename,'maplimits',[cmin cmax],'interplimits','head','plotrad',0.6)
    colorbar
    ax = gca;
    ax.CLim = [cmin cmax];
    title('ILD70n')

end


% Checking for epochs with too large responses
% for isubject = 1:length(subjID)
%     for icondition = 1:20
%         for ipresentation = 1:4
%             for ichannel = 1:10
%                 if any(abs(squeeze(extracted_alpha_for_plotting(isubject,icondition,ipresentation,ichannel,:))) > 5)
%                     extracted_alpha_for_plotting(isubject,icondition,ipresentation,ichannel,:) = nan;
%                 end
%             end
%         end
%     end
% end

[~,timeindex2] = min(abs(t - 0));
[~,timeindex3] = min(abs(t - 1000));


%% Total Amount of Alpha Power during Cue period in each condition

% Bar Plots
total_alpha_itd_50 = [];
total_alpha_itd_500 = [];
total_alpha_ild_10 = [];
total_alpha_ild_70n = [];
for isubject = 1:length(subjID)
    % Difference between attend left and attend right in each hemisphere,
    % for each subject and condition

    %
    total_alpha_itd_50(isubject) = squeeze(nanmean(extracted_alpha_for_plotting(isubject,logical(contains(string(all_maskers),'__ild_0__itd_50__').*contains(string(all_maskers),'__control_0')),:,:,timeindex2:timeindex3),[1,2,3,4,5]));
    total_alpha_itd_500(isubject) = squeeze(nanmean(extracted_alpha_for_plotting(isubject,logical(contains(string(all_maskers),'__ild_0__itd_500__').*contains(string(all_maskers),'__control_0')),:,:,timeindex2:timeindex3),[1,2,3,4,5]));
    total_alpha_ild_10(isubject) = squeeze(nanmean(extracted_alpha_for_plotting(isubject,logical(contains(string(all_maskers),'__ild_10__itd_0__').*contains(string(all_maskers),'__control_0')),:,:,timeindex2:timeindex3),[1,2,3,4,5]));
    total_alpha_ild_70n(isubject) = squeeze(nanmean(extracted_alpha_for_plotting(isubject,logical(contains(string(all_maskers),'__ild_70n__itd_0__targ_').*contains(string(all_maskers),'__control_0')),:,:,timeindex2:timeindex3),[1,2,3,4,5]));

end

figure;
boxplot([total_alpha_itd_50;total_alpha_itd_500;total_alpha_ild_10;total_alpha_ild_70n]')
xticklabels({'ITD 50','ITD 500','ILD 10','ILD 70n'})
xlabel('Condition','FontSize',18)
ylabel('Mean Alpha Power','FontSize',18)
title('Mean \Delta Alpha (z-score, Cue Period: 0-500 ms)','FontSize',18)
ylim([-1.5 1.5])




%% Topographical Alpha Lateralization
% (Pow_attend_left - Pow_attend_right)
% Calculated as the mean during the cue period
spatial_lateralization = []; % 4 x 32 vector (condition order: itd50, itd500, ild10, ild70n)

condition_tags = {'__ild_0__itd_50__','__ild_0__itd_500__','__ild_10__itd_0__','__ild_70n__itd_0__'};
for i = 1:length(condition_tags)
    these_lateralizations = [];
    for isubject = 1:length(subID)
        this_condition_tag = string(condition_tags(i));
        pow_attend_left = squeeze(nanmean(extracted_alpha_for_plotting(isubject,logical(contains(string(all_maskers),this_condition_tag).*contains(string(all_maskers),'__targ_l').*contains(string(all_maskers),'__control_0')),:,:,timeindex2:timeindex3),[1,2,3,5]));
        pow_attend_right = squeeze(nanmean(extracted_alpha_for_plotting(isubject,logical(contains(string(all_maskers),this_condition_tag).*contains(string(all_maskers),'__targ_r').*contains(string(all_maskers),'__control_0')),:,:,timeindex2:timeindex3),[1,2,3,5]));
        these_lateralizations(isubject,:) = (pow_attend_left - pow_attend_right);%./(pow_attend_left + pow_attend_right);
    end
    spatial_lateralization(i,:) = mean(these_lateralizations,1);
end
if user == 'Laptop'
    locs_filename = 'C:\Users\benri\Documents\GitHub\SRM-NIRS-EEG\chan_locs_pol_PO_ONLY.txt';
else
    locs_filename  = '/home/ben/Documents/GitHub/SRM-NIRS-EEG/chan_locs_pol_PO_ONLY.txt';
end
cmin = -0.4;
cmax = 0.4;
figure;
subplot(2,2,1)
topoplot(spatial_lateralization(1,:),locs_filename,'maplimits',[cmin cmax],'interplimits','head','plotrad',0.6)
colorbar
ax = gca;
ax.CLim = [cmin cmax];
title('ITD50')

subplot(2,2,2)
topoplot(spatial_lateralization(2,:),locs_filename,'maplimits',[cmin cmax],'interplimits','head','plotrad',0.6)
colorbar
ax = gca;
ax.CLim = [cmin cmax];
title('ITD500')

subplot(2,2,3)
topoplot(spatial_lateralization(3,:),locs_filename,'maplimits',[cmin cmax],'interplimits','head','plotrad',0.6)
colorbar
ax = gca;
ax.CLim = [cmin cmax];
title('ILD10')

subplot(2,2,4)
topoplot(spatial_lateralization(4,:),locs_filename,'maplimits',[cmin cmax],'interplimits','head','plotrad',0.6)
colorbar
ax = gca;
ax.CLim = [cmin cmax];
title('ILD70n')

sgtitle('Topographic Alpha Lateralization (\Delta Alpha Attend Left - \Delta Alpha Attend Right z-score, 0-500 ms)')
%% Time Resolved Alpha Lateralization
% (Pow_ipsilateral - Pow_contralateral)
temporal_lateralization = []; % 4 x time vector (condition order: itd50, itd500, ild10, ild70n)
temporal_lateralization_std = [];
left_hemisphere_channels = [1,2,4,5];
right_hemisphere_channels = [7,8,9,10];
condition_tags = {'__ild_0__itd_50__','__ild_0__itd_500__','__ild_10__itd_0__','__ild_70n__itd_0__'};
for i = 1:length(condition_tags)
    these_lateralizations = [];
    for isubject = 1:length(subID)
        this_condition_tag = string(condition_tags(i));
        pow_left_attend_left = squeeze(nanmean(extracted_alpha_for_plotting(isubject,logical(contains(string(all_maskers),this_condition_tag).*contains(string(all_maskers),'__targ_l').*contains(string(all_maskers),'__control_0')),:,left_hemisphere_channels,:),[1,2,4]));
        pow_left_attend_right = squeeze(nanmean(extracted_alpha_for_plotting(isubject,logical(contains(string(all_maskers),this_condition_tag).*contains(string(all_maskers),'__targ_r').*contains(string(all_maskers),'__control_0')),:,left_hemisphere_channels,:),[1,2,4]));
        pow_right_attend_left = squeeze(nanmean(extracted_alpha_for_plotting(isubject,logical(contains(string(all_maskers),this_condition_tag).*contains(string(all_maskers),'__targ_l').*contains(string(all_maskers),'__control_0')),:,right_hemisphere_channels,:),[1,2,4]));
        pow_right_attend_right = squeeze(nanmean(extracted_alpha_for_plotting(isubject,logical(contains(string(all_maskers),this_condition_tag).*contains(string(all_maskers),'__targ_r').*contains(string(all_maskers),'__control_0')),:,right_hemisphere_channels,:),[1,2,4]));
        pow_ipsilateral = cat(1,pow_left_attend_left,pow_right_attend_right);
        pow_contralateral = cat(1,pow_left_attend_right,pow_right_attend_left);
        these_lateralizations(isubject,:,:) = (pow_ipsilateral - pow_contralateral);%./(pow_attend_left + pow_attend_right);
    end
    temporal_lateralization(i,:) = nanmean(these_lateralizations,[1,2]);
    temporal_lateralization_std(i,:) = std(squeeze(nanmean(these_lateralizations,2)),[],1)./(sqrt(length(subjID))-1);
end
figure;
if method == 'Ben'
    time = linspace(all_eeg_epoch.EEG.xmin,all_eeg_epoch.EEG.xmax,size(power,4));
elseif method == 'Yuq'
    time = linspace(all_eeg_epoch.EEG.xmin,all_eeg_epoch.EEG.xmax,size(power,3));
end
hold on
shadedErrorBar(time,temporal_lateralization(1,:),temporal_lateralization_std(1,:),'lineProps','-r')
shadedErrorBar(time,temporal_lateralization(2,:),temporal_lateralization_std(2,:),'lineProps','-g')
shadedErrorBar(time,temporal_lateralization(3,:),temporal_lateralization_std(3,:),'lineProps','-b')
shadedErrorBar(time,temporal_lateralization(4,:),temporal_lateralization_std(4,:),'lineProps','-c')
title('Pow Ipsilateral - Pow Contralateral')

legend({'ITD50','ITD500','ILD10','ILD70n'})

% Ipsilateral minus contralateral during cue bar plot
ipsi_minus_contra_during_cue = [];
[~,timeindex2] = min(abs(t - 1000));
[~,timeindex3] = min(abs(t - 12000));
for i = 1:length(condition_tags)
    for isubject = 1:length(subID)
        this_condition_tag = string(condition_tags(i));
        pow_left_attend_left = squeeze(nanmean(extracted_alpha_for_plotting(isubject,logical(contains(string(all_maskers),this_condition_tag).*contains(string(all_maskers),'__targ_l').*contains(string(all_maskers),'__control_0')),:,left_hemisphere_channels,:),[1,2,4]));
        pow_left_attend_right = squeeze(nanmean(extracted_alpha_for_plotting(isubject,logical(contains(string(all_maskers),this_condition_tag).*contains(string(all_maskers),'__targ_r').*contains(string(all_maskers),'__control_0')),:,left_hemisphere_channels,:),[1,2,4]));
        pow_right_attend_left = squeeze(nanmean(extracted_alpha_for_plotting(isubject,logical(contains(string(all_maskers),this_condition_tag).*contains(string(all_maskers),'__targ_l').*contains(string(all_maskers),'__control_0')),:,right_hemisphere_channels,:),[1,2,4]));
        pow_right_attend_right = squeeze(nanmean(extracted_alpha_for_plotting(isubject,logical(contains(string(all_maskers),this_condition_tag).*contains(string(all_maskers),'__targ_r').*contains(string(all_maskers),'__control_0')),:,right_hemisphere_channels,:),[1,2,4]));
        pow_ipsilateral = cat(1,pow_left_attend_left,pow_right_attend_right);
        pow_contralateral = cat(1,pow_left_attend_right,pow_right_attend_left);
        ipsi_minus_contra_during_cue(i,isubject) = nanmean(pow_ipsilateral(:,timeindex2:timeindex3) - pow_contralateral(:,timeindex2:timeindex3),[1,2]);%./(pow_attend_left + pow_attend_right);
    end
end
figure;
violinplot(ipsi_minus_contra_during_cue')
xticklabels({'ITD50','ITD500','ILD10','ILD70n'})

% Total alpha during cue period vs. overall d-prime
